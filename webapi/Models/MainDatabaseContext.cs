// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace webapi.Models;

public partial class MainDatabaseContext : DbContext
{
    public MainDatabaseContext(DbContextOptions<MainDatabaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Authentication> Authentication { get; set; }

    public virtual DbSet<Beverage> Beverage { get; set; }

    public virtual DbSet<CalenderDate> CalenderDate { get; set; }

    public virtual DbSet<Checkout> Checkout { get; set; }

    public virtual DbSet<Customer> Customer { get; set; }

    public virtual DbSet<Dessert> Dessert { get; set; }

    public virtual DbSet<Favorites> Favorites { get; set; }

    public virtual DbSet<Food> Food { get; set; }

    public virtual DbSet<FoodCategory> FoodCategory { get; set; }

    public virtual DbSet<FoodPortions> FoodPortions { get; set; }

    public virtual DbSet<FoodUser> FoodUser { get; set; }

    public virtual DbSet<Inventory> Inventory { get; set; }

    public virtual DbSet<MainDish> MainDish { get; set; }

    public virtual DbSet<Meal> Meal { get; set; }

    public virtual DbSet<MealFoods> MealFoods { get; set; }

    public virtual DbSet<Orders> Orders { get; set; }

    public virtual DbSet<Promotion> Promotion { get; set; }

    public virtual DbSet<Reservation> Reservation { get; set; }

    public virtual DbSet<Role> Role { get; set; }

    public virtual DbSet<SideDish> SideDish { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    public virtual DbSet<Stater> Stater { get; set; }

    public virtual DbSet<Table> Table { get; set; }

    public virtual DbSet<User> User { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Authentication>(entity =>
        {
            entity.Property(e => e.UserId).ValueGeneratedNever();

            entity.HasOne(d => d.RoleNavigation).WithMany(p => p.Authentication).HasConstraintName("FK_Authentication_Role");

            entity.HasOne(d => d.User).WithOne(p => p.Authentication)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Authentication_User");
        });

        modelBuilder.Entity<CalenderDate>(entity =>
        {
            entity.HasOne(d => d.Food).WithMany(p => p.CalenderDate).HasConstraintName("FK_Calender_date_Food");
        });

        modelBuilder.Entity<Checkout>(entity =>
        {
            entity.Property(e => e.OrderId).IsFixedLength();
            entity.Property(e => e.Amount).IsFixedLength();
            entity.Property(e => e.PaymentMethod).IsFixedLength();
            entity.Property(e => e.StaffId).IsFixedLength();

            entity.HasOne(d => d.Order).WithOne(p => p.Checkout)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_checkout_orders");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_Customer_1");

            entity.Property(e => e.UserId).ValueGeneratedNever();

            entity.HasOne(d => d.User).WithOne(p => p.Customer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customer_User");
        });

        modelBuilder.Entity<Favorites>(entity =>
        {
            entity.HasOne(d => d.Food).WithMany(p => p.Favorites).HasConstraintName("FK_Favorites_Food");
        });

        modelBuilder.Entity<Food>(entity =>
        {
            entity.Property(e => e.CategoryId).IsFixedLength();

            entity.HasOne(d => d.Category).WithMany(p => p.Food)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Food_FoodCategory");
        });

        modelBuilder.Entity<FoodCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK_foodCategory");

            entity.Property(e => e.CategoryId).IsFixedLength();
            entity.Property(e => e.CategoryName).IsFixedLength();
        });

        modelBuilder.Entity<FoodPortions>(entity =>
        {
            entity.Property(e => e.FoodId).ValueGeneratedNever();
            entity.Property(e => e.LargePrice).IsFixedLength();

            entity.HasOne(d => d.Food).WithOne(p => p.FoodPortions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Food_portions_Food");
        });

        modelBuilder.Entity<Inventory>(entity =>
        {
            entity.Property(e => e.FoodId).IsFixedLength();
        });

        modelBuilder.Entity<Meal>(entity =>
        {
            entity.Property(e => e.MealId).IsFixedLength();

            entity.HasMany(d => d.Promotion).WithMany(p => p.Meal)
                .UsingEntity<Dictionary<string, object>>(
                    "MealPromotion",
                    r => r.HasOne<Promotion>().WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Meal_promotion_promotion"),
                    l => l.HasOne<Meal>().WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Meal_promotion_Meal"),
                    j =>
                    {
                        j.HasKey("MealId", "PromotionId");
                        j.ToTable("Meal_promotion");
                        j.HasIndex(new[] { "PromotionId" }, "IX_Meal_promotion_promotion_id");
                        j.IndexerProperty<string>("MealId")
                            .HasMaxLength(10)
                            .IsFixedLength()
                            .HasColumnName("meal_id");
                        j.IndexerProperty<string>("PromotionId")
                            .HasMaxLength(10)
                            .IsFixedLength()
                            .HasColumnName("promotion_id");
                    });
        });

        modelBuilder.Entity<MealFoods>(entity =>
        {
            entity.HasKey(e => e.MealId).HasName("PK_Meal_foods_1");

            entity.Property(e => e.MealId).IsFixedLength();

            entity.HasOne(d => d.Food).WithMany(p => p.MealFoods)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Meal_foods_Food");

            entity.HasOne(d => d.Meal).WithOne(p => p.MealFoods)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Meal_foods_Meal");
        });

        modelBuilder.Entity<Orders>(entity =>
        {
            entity.Property(e => e.OrderId).IsFixedLength();
            entity.Property(e => e.OrderStatus).IsFixedLength();
            entity.Property(e => e.ReservationId).IsFixedLength();

            // commented following to remove foreignkey
            // uncomment and fix later

            //entity.HasOne(d => d.Reservation).WithMany(p => p.Orders)
            //    .OnDelete(DeleteBehavior.ClientSetNull)
            //    .HasConstraintName("FK_orders_Reservation");
        });

        modelBuilder.Entity<Promotion>(entity =>
        {
            entity.Property(e => e.PromotionId).IsFixedLength();
        });

        modelBuilder.Entity<Reservation>(entity =>
        {
            entity.Property(e => e.ReservationId).IsFixedLength();
            entity.Property(e => e.ActualDeparture)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Customer).WithMany(p => p.Reservation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservation_Customer");

            entity.HasOne(d => d.Staff).WithMany(p => p.Reservation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservation_Staff");

            entity.HasOne(d => d.TableNoNavigation).WithMany(p => p.Reservation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservation_table");
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_SupportStaff_1");

            entity.Property(e => e.UserId).ValueGeneratedNever();
        });

        modelBuilder.Entity<Table>(entity =>
        {
            entity.Property(e => e.TableNo).ValueGeneratedNever();
            entity.Property(e => e.Availability).IsFixedLength();
            entity.Property(e => e.Seating).IsFixedLength();
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Phone).IsFixedLength();
            entity.Property(e => e.Username).IsFixedLength();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}